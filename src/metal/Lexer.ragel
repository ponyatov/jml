%%{
	machine lexer;

    sp      = [ \t\r\n]+    							;
	comment = [\\\#][^\n]*  							;
	hex		= '0x'[0-9a-fA-F]+							;
	bin		= '0b'[01]+									;
	num     = [+\-]?([0-9]+'.'[0-9]*|[0-9]*'.'[0-9]+)	;
	int		= [+\-]?[0-9]+ 								;
	exp		= (num|int)[eE][+\-]?[0-9]+					;
	word    = [^ \t\r\n]+   							;

	FORTH := |*
	    comment											  ;
	    sp												  ;
	    hex       => { token = new Hex(tok(2)); fbreak; } ;
	    bin       => { token = new Bin(tok(2)); fbreak; } ;
	    (exp|num) => { token = new Num(tok(0)); fbreak; } ;
	    int       => { token = new Int(tok(0)); fbreak; } ;
	    word      => { token = new Sym(tok(0)); fbreak; } ;
	*|;
}%%

package metal;

import frame.Frame;
import frame.Sym;
import frame.Num;
import frame.Int;
import frame.Hex;
import frame.Bin;

import java.util.Arrays;

public class Lexer {

    int cs,p,pe,eof,ts,te,act;
    char[] data;

    %% write data ;

    public Lexer() { input(""); }
    
    private String tok(int offset) {
    	return new String(Arrays.copyOfRange(data,ts+offset,te));
    }
    
    public void input(String command) {
          cs = lexer_start;
        data = command.toCharArray();
           p = 0;
          pe = data.length;
         eof = pe;
       token = null;
    }

    private Frame token = null;

    public void _token() {
        %% write exec ;
    }

    public Frame token() {
        token = null;
        _token();
        return token;
    }

};
